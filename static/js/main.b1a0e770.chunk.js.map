{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","selectedValue","target","value","setState","size","filteredData","items","state","originalData","filter","item","includes","bind","assertThisInitialized","_this2","fetch","then","response","json","jsonData","catch","error","console","react_default","a","createElement","className","onChange","map","i","App_Product","key","product","React","Component","Product","props","src","concat","productImage","alt","isSale","type","isExclusive","productName","price","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAGMA,qBACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeFI,aAAe,SAAAC,GACb,IAAMC,EAAgBD,EAAEE,OAAOC,MAC/BX,EAAKY,SAAS,CAAEC,KAAMJ,IACtB,IACIK,EADAC,EAAQf,EAAKgB,MAAMC,aASvB,OANEH,EADoB,KAAlBL,EACaT,EAAKgB,MAAMC,aAEXF,EAAMG,OAAO,SAASC,GACnC,OAAOA,EAAKN,KAAKO,SAASX,KAGvBT,EAAKY,SAAS,CAAEG,MAAOD,KA1B9Bd,EAAKgB,MAAQ,CAAED,MAAO,GAAIE,aAAc,IACxCjB,EAAKO,aAAeP,EAAKO,aAAac,KAAlBpB,OAAAqB,EAAA,EAAArB,CAAAD,IAHRA,oFAKO,IAAAuB,EAAApB,KACnBqB,MAAM,qDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKX,SAAS,CAAEG,MAAOa,EAAUX,aAAcW,MAEhDC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,sCAmBlB,IAAIf,EAAQZ,KAAKa,MAAMD,MACvB,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAQE,SAAUjC,KAAKI,cACrByB,EAAAC,EAAAC,cAAA,UAAQvB,MAAM,IAAd,kBACAqB,EAAAC,EAAAC,cAAA,UAAQvB,MAAM,MAAd,MACAqB,EAAAC,EAAAC,cAAA,UAAQvB,MAAM,KAAd,KACAqB,EAAAC,EAAAC,cAAA,UAAQvB,MAAM,KAAd,KACAqB,EAAAC,EAAAC,cAAA,UAAQvB,MAAM,KAAd,KACAqB,EAAAC,EAAAC,cAAA,UAAQvB,MAAM,MAAd,QAGJqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZpB,EAAMsB,IAAI,SAAClB,EAAMmB,GAAP,OACTN,EAAAC,EAAAC,cAACK,EAAD,CAASC,IAAKF,EAAGG,QAAStB,eAhDpBuB,IAAMC,YAwDlBC,EAAU,SAAAC,GACd,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEY,IAAG,YAAAC,OAAcF,EAAMJ,QAAQO,cAC/BC,IAAKJ,EAAMJ,QAAQO,gBAGvBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZU,EAAMJ,QAAQS,QACblB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBgB,KAAK,UAAxC,QAIDN,EAAMJ,QAAQW,aACbpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBgB,KAAK,UAA1C,cAKJnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBU,EAAMJ,QAAQY,aAC9CrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBU,EAAMJ,QAAQa,UAMxCvD,IC5EKwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.b1a0e770.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { items: [], originalData: [] };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentWillMount() {\n    fetch(\"https://api.jsonbin.io/b/5cae9a54fb42337645ebcad3\")\n      .then(response => response.json())\n      .then(jsonData => {\n        this.setState({ items: jsonData, originalData: jsonData });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  handleChange = e => {\n    const selectedValue = e.target.value;\n    this.setState({ size: selectedValue });\n    let items = this.state.originalData;\n    let filteredData;\n    if (selectedValue === \"\") {\n      filteredData = this.state.originalData;\n    } else {\n      filteredData = items.filter(function(item) {\n        return item.size.includes(selectedValue);\n      });\n    }\n    return this.setState({ items: filteredData });\n  };\n  render() {\n    let items = this.state.items;\n    return (\n      <div className=\"page\">\n        <header className=\"page__header\">\n          <h1>Women's tops</h1>\n          <select onChange={this.handleChange}>\n            <option value=\"\">Filter by size</option>\n            <option value=\"XS\">XS</option>\n            <option value=\"S\">S</option>\n            <option value=\"M\">M</option>\n            <option value=\"L\">L</option>\n            <option value=\"XL\">XL</option>\n          </select>\n        </header>\n        <div className=\"container\">\n          {items.map((item, i) => (\n            <Product key={i} product={item} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Product = props => {\n  return (\n    <div className=\"product\">\n      <div className=\"product__image\">\n        <img\n          src={`./images/${props.product.productImage}`}\n          alt={props.product.productImage}\n        />\n      </div>\n      <div className=\"product__type\">\n        {props.product.isSale && (\n          <div className=\"button button-red\" type=\"button\">\n            Sale\n          </div>\n        )}\n        {props.product.isExclusive && (\n          <div className=\"button button-green\" type=\"button\">\n            Exclusive\n          </div>\n        )}\n      </div>\n      <div className=\"product__footer\">\n        <div className=\"product__name\">{props.product.productName}</div>\n        <div className=\"product__price\">{props.product.price}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}